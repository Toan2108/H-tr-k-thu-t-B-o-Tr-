import streamlit as st
import pandas as pd
import openai
import os
from dotenv import load_dotenv
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

st.set_page_config(page_title="AI Chatbot b·∫£o tr√¨", layout="wide")
st.title("ü§ñ AI Chatbot b·∫£o tr√¨ t·ª´ Excel + OpenAI (Semantic Search)")

@st.cache_data
def load_data(file):
    df = pd.read_excel(file)
    df = df.dropna(how="all")
    return df

@st.cache_resource
def load_model():
    return SentenceTransformer("paraphrase-MiniLM-L6-v2")

uploaded_file = st.file_uploader("üìÇ T·∫£i l√™n Excel d·ªØ li·ªáu b·∫£o tr√¨ (.xlsx)", type="xlsx")
if uploaded_file:
    df = load_data(uploaded_file)
    st.success(f"‚úÖ ƒê√£ t·∫£i {len(df)} d√≤ng d·ªØ li·ªáu")
    with st.expander("üîç Xem tr∆∞·ªõc d·ªØ li·ªáu"):
        st.dataframe(df, use_container_width=True)

    model = load_model()
    text_fields = df.select_dtypes(include="object").fillna("").astype(str)
    docs = text_fields.apply(lambda x: " | ".join(x), axis=1).tolist()
    doc_embeddings = model.encode(docs)

    query = st.text_input("üí¨ Nh·∫≠p c√¢u h·ªèi li√™n quan d·ªØ li·ªáu:")
    if query:
        query_embedding = model.encode([query])
        sims = cosine_similarity(query_embedding, doc_embeddings)[0]
        top_idx = sims.argmax()
        top_score = sims[top_idx]

        st.markdown("### ‚úÖ K·∫øt qu·∫£ g·∫ßn nh·∫•t t·ª´ d·ªØ li·ªáu:")
        st.dataframe(df.iloc[[top_idx]])

        prompt = f"""D·ªØ li·ªáu k·ªπ thu·∫≠t: {docs[top_idx]}
C√¢u h·ªèi: {query}
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c:"""

        if len(prompt) > 10000:
            st.warning("‚ö†Ô∏è C√¢u h·ªèi/d·ªØ li·ªáu v∆∞·ª£t gi·ªõi h·∫°n token. H·ªá th·ªëng ƒë√£ r√∫t g·ªçn ƒë·ªÉ tr√°nh l·ªói.")
            prompt = prompt[:10000]

        try:
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            st.success("ü§ñ Tr·∫£ l·ªùi t·ª´ ChatGPT:")
            st.write(response.choices[0].message.content)
        except Exception as e:
            st.error(f"L·ªói: {e}")
